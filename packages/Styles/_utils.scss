@use "sass:math";

@import "unit";
@import "breakpoints";

@function calcEm($pxSize) {
    $emSize: math.div($pxSize, 16px);

    @return $emSize * 1em;
}

@function calcRem($pxSize) {
    $remSize: math.div($pxSize, 16px);

    @return $remSize * 1rem;
}

@function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
}

@mixin uppercaseLabel() {
    font-size: 0.625rem;

    letter-spacing: $global-letter-spacing;
    text-transform: uppercase;
}

@mixin truncate($lineNumber) {
    @supports (-webkit-line-clamp: 1) {
        display: -webkit-box;
        overflow: hidden;
        text-overflow: ellipsis;
        -webkit-line-clamp: $lineNumber;
        -webkit-box-orient: vertical;
        @if $lineNumber == 1 {
            word-break: break-all;
        } @else {
            word-break: break-word;
        }
    }
}

@function color($color, $shade: "normal") {
    @if $color == "black" {
        @return $black;
    } @else if $color == "white" {
        @return $white;
    } @else {
        @return map-get(map-get($designSystemPalette, $color), $shade);
    }
}

/// Remove the unit of a length
/// @link https://css-tricks.com/snippets/sass/strip-unit-function/
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
    @if type-of($number) == "number" and not unitless($number) {
        @return math.div($number, ($number * 0 + 1));
    }

    @return $number;
}

@mixin medium-large {
    @media only screen and (min-width: 1024px) and (max-width: 1366px) {
        @content;
    }
}

@mixin large-xlarge {
    @media only screen and (min-width: 1366px) and (max-width: 1920px) {
        @content;
    }
}

@mixin xlarge-infinity {
    @media only screen and (min-width: 1920px) {
        @content;
    }
}

@mixin spacing($property, $spacing-factor, $important: false) {
    @if $important == true {
        #{$property}: $spacing-factor * $base-spacing !important;
    } @else {
        #{$property}: $spacing-factor * $base-spacing;
    }
}

// BEM mixin
// Usage:
// @include b[=block](test) {
//     background: red;
//     @include e[=element](element){
//         font-size: calcRem(14px);
//
//         @include m[=modifier](big) {
//             font-size: calcRem(18px);
//         }
//     };
// }
$elementSeparator: "__";
$modifierSeparator: "--";

@function containsModifier($selector) {
    $selector: selectorToString($selector);

    @if str-index($selector, $modifierSeparator) {
        @return true;
    } @else {
        @return false;
    }
}

@function selectorToString($selector) {
    $selector: inspect($selector); //cast to string
    $selector: str-slice($selector, 2, -2); //remove brackets
    @return $selector;
}

@function getBlock($selector) {
    $selector: selectorToString($selector);
    $modifierStart: str-index($selector, $modifierSeparator) - 1;

    @return str-slice($selector, 0, $modifierStart);
}

@mixin b($block) {
    .#{$block} {
        @content;
    }
}

@mixin e($element) {
    $selector: &;

    @if containsModifier($selector) {
        $block: getBlock($selector);

        @at-root {
            #{$selector} {
                #{$block + $elementSeparator + $element} {
                    @content;
                }
            }
        }
    } @else {
        @at-root {
            #{$selector + $elementSeparator + $element} {
                @content;
            }
        }
    }
}

@mixin m($modifier) {
    @at-root {
        #{&}#{$modifierSeparator + $modifier} {
            @content;
        }
    }
}
